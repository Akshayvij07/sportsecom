// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/usecase/interface/user.go

// Package mockusecase is a generated GoMock package.
package mockusecase

import (
	context "context"
	requests "github.com/Akshayvij07/ecommerce/pkg/helper/request"
	response "github.com/Akshayvij07/ecommerce/pkg/helper/respondse"
	domain "github.com/Akshayvij07/ecommerce/pkg/domain"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUserUseCase is a mock of UserUseCase interface.
type MockUserUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockUserUseCaseMockRecorder
}

// MockUserUseCaseMockRecorder is the mock recorder for MockUserUseCase.
type MockUserUseCaseMockRecorder struct {
	mock *MockUserUseCase
}

// NewMockUserUseCase creates a new mock instance.
func NewMockUserUseCase(ctrl *gomock.Controller) *MockUserUseCase {
	mock := &MockUserUseCase{ctrl: ctrl}
	mock.recorder = &MockUserUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserUseCase) EXPECT() *MockUserUseCaseMockRecorder {
	return m.recorder
}

// AddAdress mocks base method.
func (m *MockUserUseCase) AddAdress(ctx context.Context, UserID int, AddressReq requests.AddressReq, isDefault bool) error  {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddAdress", ctx, UserID, AddressReq,isDefault)
	ret0, _ := ret[1].(error)
	return ret0
}

// AddAdress indicates an expected call of AddAdress.
func (mr *MockUserUseCaseMockRecorder) AddAdress(ctx, UserID, address ,isDefault interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAdress", reflect.TypeOf((*MockUserUseCase)(nil).AddAdress), ctx, UserID, address,isDefault)
}

// AddToWishList mocks base method.
func (m *MockUserUseCase) AddToWishList(ctx context.Context, wishList domain.WishList) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddToWishList", ctx, wishList)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddToWishList indicates an expected call of AddToWishList.
func (mr *MockUserUseCaseMockRecorder) AddToWishList(ctx, wishList interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddToWishList", reflect.TypeOf((*MockUserUseCase)(nil).AddToWishList), ctx, wishList)
}

// ListWishlist mocks base method.
func (m *MockUserUseCase) ListWishlist(ctx context.Context, userID uint) ([]response.Wishlist, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWishlist", ctx, userID)
	ret0, _ := ret[0].([]response.Wishlist)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWishlist indicates an expected call of ListWishlist.
func (mr *MockUserUseCaseMockRecorder) ListWishlist(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWishlist", reflect.TypeOf((*MockUserUseCase)(nil).ListWishlist), ctx, userID)
}

// OtpLogin mocks base method.
func (m *MockUserUseCase) OtpLogin(mobno string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OtpLogin", mobno)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OtpLogin indicates an expected call of OtpLogin.
func (mr *MockUserUseCaseMockRecorder) OtpLogin(mobno interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OtpLogin", reflect.TypeOf((*MockUserUseCase)(nil).OtpLogin), mobno)
}

// RemoveFromWishList mocks base method.
func (m *MockUserUseCase) RemoveFromWishList(ctx context.Context, wishList domain.WishList) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveFromWishList", ctx, wishList)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveFromWishList indicates an expected call of RemoveFromWishList.
func (mr *MockUserUseCaseMockRecorder) RemoveFromWishList(ctx, wishList interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveFromWishList", reflect.TypeOf((*MockUserUseCase)(nil).RemoveFromWishList), ctx, wishList)
}

// UpdateAdress mocks base method.
func (m *MockUserUseCase) UpdateAdress(ctx context.Context, UserID int, AddressReq requests.AddressReq)  error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAdress", ctx, UserID, AddressReq)
	ret0, _ := ret[1].(error)
	return ret0
}

// UpdateAdress indicates an expected call of UpdateAdress.
func (mr *MockUserUseCaseMockRecorder) UpdateAddress(ctx, UserID, address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAdress", reflect.TypeOf((*MockUserUseCase)(nil).UpdateAdress), ctx, UserID, address)
}

// UserLogin mocks base method.
func (m *MockUserUseCase) Login(ctx context.Context, user requests.Login) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserLogin", ctx, user)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserLogin indicates an expected call of UserLogin.
func (mr *MockUserUseCaseMockRecorder) UserLogin(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockUserUseCase)(nil).Login), ctx, user)
}

// UserSignup mocks base method.
func (m *MockUserUseCase) SignUp(ctx context.Context, user requests.UserSign) (response.UserValue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserSignup", ctx, user)
	ret0, _ := ret[0].(response.UserValue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserSignup indicates an expected call of UserSignup.
func (mr *MockUserUseCaseMockRecorder) Signup(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignUp", reflect.TypeOf((*MockUserUseCase)(nil).SignUp), ctx, user)
}


//ChangePassword mocks base method.
func (m *MockUserUseCase) ChangePassword(ctx context.Context, User requests.Password) error{
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m,"ChangePassword",ctx,User)
	ret0 := ret[0].(error)
	return ret0
}

//ChangePassword Indicate an expected call of ChangePassword
func (mr *MockUserUseCaseMockRecorder) ChangePassword(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangePassword", reflect.TypeOf((*MockUserUseCase)(nil).ChangePassword), ctx, user)
}

// VeiwAdress mocks base method.
func (m *MockUserUseCase) VeiwAdress(ctx context.Context, UserID int) ([]response.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VeiwAdress", ctx, UserID)
	ret0, _ := ret[0].([]response.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VeiwAdress indicates an expected call of VeiwAdress.
func (mr *MockUserUseCaseMockRecorder) VeiwAdress(ctx, UserID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VeiwAdress", reflect.TypeOf((*MockUserUseCase)(nil).VeiwAdress), ctx, UserID)
}

//GetInvoice mocks base method.
func (m *MockUserUseCase) GetInvoice(ctx context.Context, UserID int) (Invoice response.Invoice, err error){
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInvoice", ctx, UserID)
	ret0, _ := ret[0].(response.Invoice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

//GetInvoice indicates an expected call of Getinvoice
func (mr *MockUserUseCaseMockRecorder) GetInvoice(ctx, UserID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInvoice", reflect.TypeOf((*MockUserUseCase)(nil).GetInvoice), ctx, UserID)
}